#!/usr/bin/env python3

import sys
import os
import subprocess
import unittest
from toast.mpirunner import MPITestRunner

# This helper script manages an in-place build within the source tree, 
# which is useful for debugging.

if len(sys.argv) < 2:
    print("")
    print("usage:  {} <command> <options>".format(sys.argv[0]))
    print("        where commands are:")
    print("             clean (clean up all build products)")
    print("             build (builds all products)")
    print("             test [name_of_test_file.py]")
    print("                  (optionally run a single test file or all tests)")
    print("             env (print the shell commands needed to use the build)")
    print("")
    sys.exit(0)

# get the absolute path of the current script.

srcdir = os.path.abspath(os.path.dirname(sys.argv[0]))

if sys.argv[1] == 'clean':
    subprocess.call("python3 setup.py clean", shell=True, executable="/bin/bash")

elif sys.argv[1] == 'build':
    subprocess.call("python3 setup.py clean", shell=True, executable="/bin/bash")
    subprocess.call("python3 setup.py build_clib", shell=True, executable="/bin/bash")
    subprocess.call("python3 setup.py build_ext --inplace", shell=True, executable="/bin/bash")

elif sys.argv[1] == 'test':

    if len(sys.argv) < 3:
        pat = 'test_*.py'
    else:
        pat = sys.argv[2]

    loader = unittest.TestLoader()
    runner = MPITestRunner(verbosity=2)
    suite = loader.discover('tests', pattern=pat, top_level_dir='.')
    runner.run(suite)

elif sys.argv[1] == 'env':

    pipedir = os.path.join(srcdir, 'pipelines')
    envstr = "export PATH={}:${{PATH}}; export PYTHONPATH={}:${{PYTHONPATH}}".format(pipedir, srcdir)
    print(envstr)

else:
    print("unknown command \"{}\"".format(sys.argv[1]))

