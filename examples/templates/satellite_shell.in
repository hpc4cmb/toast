#!/bin/bash

set -o errexit
set -v

@EXTRA_INIT@

echo -e "\n-----------------------------------------------------------------------"
echo -e "ENVIRONMENT:\n"
env | sort -d
echo -e "-----------------------------------------------------------------------\n"
echo "PYTHON: $(which python)"
echo "PYTHON VERSION: $(python --version &> /dev/stdout)"
echo ""

outdir="out_@SIZE@_satellite"
mkdir -p "${outdir}"

# This script assumes that you have toast and all dependencies
# installed and loaded in your environment.

# Generate the focalplane file if it does not already exist.

detpix=@DETPIX@

fpfile="${outdir}/fp_${detpix}.pkl"
fpparfile="@TOPDIR@/params/satellite/focalplane.par"

if [ ! -e "${fpfile}" ]; then
    @MPI_RUN@ -n 1 toast_fake_focalplane.py @$fpparfile \
        --minpix ${detpix} --out "${outdir}/fp"
fi

# The executable script

ex=$(which toast_satellite_sim.py)
echo "Using ${ex}"

# Scan strategy parameters from a file

parfile="@TOPDIR@/params/satellite/sim_noise_hwp.par"

# Observations

obs_len="24.0"
obs_gap="4.0"
nobs=@NOBS@

# Map making parameters

nside="512"

# Data distribution parameters.  Group size is one process.

groupsize=1

# The commandline

com="${ex} @${parfile} \
--group-size ${groupsize} \
--focalplane ${fpfile} \
--nside ${nside} \
--obs-time-h ${obs_len} \
--gap ${obs_gap} \
--obs-num ${nobs} \
--outdir ${outdir}/out \
$@ \
"

# Use 2 processes, each with 2 threads

procs=2
if [ "$(uname)" = "Darwin" ]; then
    threads=$(($(sysctl -n hw.ncpu)/${procs}))
else
    threads=$(($(grep -c ^processor /proc/cpuinfo)/${procs}))
fi

export OMP_NUM_THREADS=${threads}
export TOAST_NUM_THREADS=${OMP_NUM_THREADS}
echo "OpenMP # threads: ${OMP_NUM_THREADS}"
echo "TOAST # threads: ${TOAST_NUM_THREADS}"

run="@MPI_RUN@ -n ${procs}"

: ${LOG_OUT:="${outdir}/log"}
echo "${run} ${com}"
eval ${run} ${com} > ${LOG_OUT} 2>&1
