# Copyright (c) 2015-2017 by the parties listed in the AUTHORS file.
# All rights reserved.  Use of this source code is governed by 
# a BSD-style license that can be found in the LICENSE file.

import sys
import ctypes as ct

from ctypes.util import find_library

import numpy as np
import numpy.ctypeslib as npc


# open library

library_path = "@LIBTOAST_PATH@"
lib = ct.CDLL(library_path, mode=ct.RTLD_GLOBAL)

# libc routines

libc_path = find_library("libc")
libc = ct.CDLL(libc_path, mode=ct.RTLD_GLOBAL)

libc.free.restype = None
libc.free.argtypes = [ ct.c_void_p ]

#--------------------------------------
# Library initialize / finalize
#--------------------------------------

p_c_char = ct.POINTER(ct.c_char)
pp_c_char = ct.POINTER(p_c_char)

lib.ctoast_init.restype = None
lib.ctoast_init.argtypes = [ ct.c_int, pp_c_char ]

def cinit ():
    argc = len(sys.argv)
    argv = (p_c_char * (argc + 1))()
    for i, arg in enumerate(sys.argv):
        enc_arg = arg.encode('utf-8')
        argv[i] = ct.create_string_buffer(enc_arg)
    lib.ctoast_init(argc, argv)
    return

lib.ctoast_finalize.restype = None
lib.ctoast_finalize.argtypes = []

def cfinalize ():
    lib.ctoast_finalize()
    return

#--------------------------------------
# Math sub-library
#--------------------------------------

# special functions

lib.ctoast_sf_sin.restype = None
lib.ctoast_sf_sin.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_sin(ang):
    n = len(ang)
    sinout = np.zeros_like(ang)
    lib.ctoast_sf_sin(n, ang, sinout)
    return sinout

lib.ctoast_sf_cos.restype = None
lib.ctoast_sf_cos.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_cos(ang):
    n = len(ang)
    cosout = np.zeros_like(ang)
    lib.ctoast_sf_cos(n, ang, cosout)
    return cosout

lib.ctoast_sf_sincos.restype = None
lib.ctoast_sf_sincos.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_sincos(ang):
    n = len(ang)
    sinout = np.zeros_like(ang)
    cosout = np.zeros_like(ang)
    lib.ctoast_sf_sincos(n, ang, sinout, cosout)
    return (sinout, cosout)

lib.ctoast_sf_atan2.restype = None
lib.ctoast_sf_atan2.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_atan2(y, x):
    n = len(y)
    if y.shape != x.shape:
        raise RuntimeError("inputs must be the same length")
    ang = np.zeros_like(y)
    lib.ctoast_sf_atan2(n, y, x, ang)
    return ang

lib.ctoast_sf_sqrt.restype = None
lib.ctoast_sf_sqrt.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_sqrt(input):
    n = len(input)
    out = np.zeros_like(input)
    lib.ctoast_sf_sqrt(n, input, out)
    return out

lib.ctoast_sf_rsqrt.restype = None
lib.ctoast_sf_rsqrt.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_rsqrt(input):
    n = len(input)
    out = np.zeros_like(input)
    lib.ctoast_sf_rsqrt(n, input, out)
    return out

lib.ctoast_sf_exp.restype = None
lib.ctoast_sf_exp.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_exp(input):
    n = len(input)
    out = np.zeros_like(input)
    lib.ctoast_sf_exp(n, input, out)
    return out

lib.ctoast_sf_log.restype = None
lib.ctoast_sf_log.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_log(input):
    n = len(input)
    out = np.zeros_like(input)
    lib.ctoast_sf_log(n, input, out)
    return out

lib.ctoast_sf_fast_sin.restype = None
lib.ctoast_sf_fast_sin.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_fast_sin(ang):
    n = len(ang)
    sinout = np.zeros_like(ang)
    lib.ctoast_sf_fast_sin(n, ang, sinout)
    return sinout

lib.ctoast_sf_fast_cos.restype = None
lib.ctoast_sf_fast_cos.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_fast_cos(ang):
    n = len(ang)
    cosout = np.zeros_like(ang)
    lib.ctoast_sf_fast_cos(n, ang, cosout)
    return cosout

lib.ctoast_sf_fast_sincos.restype = None
lib.ctoast_sf_fast_sincos.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_fast_sincos(ang):
    n = len(ang)
    sinout = np.zeros_like(ang)
    cosout = np.zeros_like(ang)
    lib.ctoast_sf_fast_sincos(n, ang, sinout, cosout)
    return (sinout, cosout)

lib.ctoast_sf_fast_atan2.restype = None
lib.ctoast_sf_fast_atan2.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_fast_atan2(y, x):
    n = len(y)
    if y.shape != x.shape:
        raise RuntimeError("inputs must be the same length")
    ang = np.zeros_like(y)
    lib.ctoast_sf_fast_atan2(n, y, x, ang)
    return ang

lib.ctoast_sf_fast_sqrt.restype = None
lib.ctoast_sf_fast_sqrt.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_fast_sqrt(input):
    n = len(input)
    out = np.zeros_like(input)
    lib.ctoast_sf_fast_sqrt(n, input, out)
    return out

lib.ctoast_sf_fast_rsqrt.restype = None
lib.ctoast_sf_fast_rsqrt.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_fast_rsqrt(input):
    n = len(input)
    out = np.zeros_like(input)
    lib.ctoast_sf_fast_rsqrt(n, input, out)
    return out

lib.ctoast_sf_fast_exp.restype = None
lib.ctoast_sf_fast_exp.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_fast_exp(input):
    n = len(input)
    out = np.zeros_like(input)
    lib.ctoast_sf_fast_exp(n, input, out)
    return out

lib.ctoast_sf_fast_log.restype = None
lib.ctoast_sf_fast_log.argtypes = [ ct.c_int, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"), npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def sf_fast_log(input):
    n = len(input)
    out = np.zeros_like(input)
    lib.ctoast_sf_fast_log(n, input, out)
    return out

# RNG

lib.ctoast_rng_dist_uint64.restype = None
lib.ctoast_rng_dist_uint64.argtypes = [ ct.c_ulong, ct.c_ulonglong, ct.c_ulonglong, ct.c_ulonglong, ct.c_ulonglong, npc.ndpointer(dtype=np.uint64, ndim=1, flags="C_CONTIGUOUS") ]

def rng_dist_uint64(n, key1, key2, counter1, counter2):
    ret = np.zeros(n, dtype=np.uint64)
    lib.ctoast_rng_dist_uint64(n, key1, key2, counter1, counter2, ret)
    return ret

lib.ctoast_rng_dist_uniform_01.restype = None
lib.ctoast_rng_dist_uniform_01.argtypes = [ ct.c_ulong, ct.c_ulonglong, ct.c_ulonglong, ct.c_ulonglong, ct.c_ulonglong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def rng_dist_uniform_01(n, key1, key2, counter1, counter2):
    ret = np.zeros(n, dtype=np.float64)
    lib.ctoast_rng_dist_uniform_01(n, key1, key2, counter1, counter2, ret)
    return ret

lib.ctoast_rng_dist_uniform_11.restype = None
lib.ctoast_rng_dist_uniform_11.argtypes = [ ct.c_ulong, ct.c_ulonglong, ct.c_ulonglong, ct.c_ulonglong, ct.c_ulonglong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def rng_dist_uniform_11(n, key1, key2, counter1, counter2):
    ret = np.zeros(n, dtype=np.float64)
    lib.ctoast_rng_dist_uniform_11(n, key1, key2, counter1, counter2, ret)
    return ret

lib.ctoast_rng_dist_normal.restype = None
lib.ctoast_rng_dist_normal.argtypes = [ ct.c_ulong, ct.c_ulonglong, ct.c_ulonglong, ct.c_ulonglong, ct.c_ulonglong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def rng_dist_normal(n, key1, key2, counter1, counter2):
    ret = np.zeros(n, dtype=np.float64)
    lib.ctoast_rng_dist_normal(n, key1, key2, counter1, counter2, ret)
    return ret

# Quaternion array

lib.ctoast_qarray_list_dot.restype = None
lib.ctoast_qarray_list_dot.argtypes = [ ct.c_ulong, ct.c_ulong, ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_list_dot(n, m, d, a, b):
    dotprod = np.zeros(n, dtype=np.float64)
    lib.ctoast_qarray_list_dot(n, m, d, a, b, dotprod)
    return dotprod

lib.ctoast_qarray_inv.restype = None
lib.ctoast_qarray_inv.argtypes = [ ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_inv(n, q):
    qcopy = np.copy(q)
    lib.ctoast_qarray_inv(n, qcopy)
    return qcopy

lib.ctoast_qarray_amplitude.restype = None
lib.ctoast_qarray_amplitude.argtypes = [ ct.c_ulong, ct.c_ulong, ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_amplitude(n, m, d, v):
    amp = np.zeros(n, dtype=np.float64)
    lib.ctoast_qarray_amplitude(n, m, d, v, amp)
    return amp

lib.ctoast_qarray_normalize.restype = None
lib.ctoast_qarray_normalize.argtypes = [ ct.c_ulong, ct.c_ulong, ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_normalize(n, m, d, q_in):
    q_out = np.zeros_like(q_in)
    lib.ctoast_qarray_normalize(n, m, d, q_in, q_out)
    return q_out

lib.ctoast_qarray_normalize_inplace.restype = None
lib.ctoast_qarray_normalize_inplace.argtypes = [ ct.c_ulong, ct.c_ulong, ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_normalize_inplace(n, m, d, q):
    lib.ctoast_qarray_normalize_inplace(n, m, d, q)
    return

lib.ctoast_qarray_rotate.restype = None
lib.ctoast_qarray_rotate.argtypes = [ ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_rotate(n, q, v_in):
    v_out = np.zeros_like(v_in)
    lib.ctoast_qarray_rotate(n, q, v_in, v_out)
    return v_out

lib.ctoast_qarray_mult.restype = None
lib.ctoast_qarray_mult.argtypes = [ ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_mult(n, p, q):
    r = np.zeros_like(p)
    lib.ctoast_qarray_mult(n, p, q, r)
    return r

lib.ctoast_qarray_slerp.restype = None
lib.ctoast_qarray_slerp.argtypes = [ ct.c_ulong, ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_slerp(n_time, n_targettime, time, targettime, q_in):
    q_interp = np.zeros(n_targettime*4, dtype=np.float64)
    lib.ctoast_qarray_slerp(n_time, n_targettime, time, targettime, q_in, q_interp)
    return q_interp

lib.ctoast_qarray_exp.restype = None
lib.ctoast_qarray_exp.argtypes = [ ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_exp(n, q_in):
    q_out = np.zeros_like(q_in)
    lib.ctoast_qarray_exp(n, q_in, q_out)
    return q_out

lib.ctoast_qarray_ln.restype = None
lib.ctoast_qarray_ln.argtypes = [ ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_ln(n, q_in):
    q_out = np.zeros_like(q_in)
    lib.ctoast_qarray_ln(n, q_in, q_out)
    return q_out

lib.ctoast_qarray_pow.restype = None
lib.ctoast_qarray_pow.argtypes = [ ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_pow(n, p, q_in):
    q_out = np.zeros_like(q_in)
    lib.ctoast_qarray_pow(n, p, q_in, q_out)
    return q_out

lib.ctoast_qarray_from_axisangle.restype = None
lib.ctoast_qarray_from_axisangle.argtypes = [ ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_from_axisangle(n, axis, angle):
    q_out = np.zeros(n*4, dtype=np.float64)
    lib.ctoast_qarray_from_axisangle(n, axis, angle, q_out)
    return q_out

lib.ctoast_qarray_to_axisangle.restype = None
lib.ctoast_qarray_to_axisangle.argtypes = [ ct.c_ulong, 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_to_axisangle(n, q):
    axis = np.zeros(n*3, dtype=np.float64)
    angle = np.zeros(n, dtype=np.float64)
    lib.ctoast_qarray_to_axisangle(n, q, axis, angle)
    return (axis, angle)

lib.ctoast_qarray_to_rotmat.restype = None
lib.ctoast_qarray_to_rotmat.argtypes = [ 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_to_rotmat(q):
    rotmat = np.zeros(9, dtype=np.float64)
    lib.ctoast_qarray_to_rotmat(q, rotmat)
    return rotmat

lib.ctoast_qarray_from_rotmat.restype = None
lib.ctoast_qarray_from_rotmat.argtypes = [ 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_from_rotmat(rotmat):
    q = np.zeros(4, dtype=np.float64)
    lib.ctoast_qarray_from_rotmat(rotmat, q)
    return q

lib.ctoast_qarray_from_vectors.restype = None
lib.ctoast_qarray_from_vectors.argtypes = [ 
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def qarray_from_vectors(vec1, vec2):
    q = np.zeros(4, dtype=np.float64)
    lib.ctoast_qarray_from_vectors(vec1, vec2, q)
    return q

# FFT

# typedef enum {
#     PLAN_FAST = 0,
#     PLAN_BEST = 1
# } ctoast_fft_plan_type;
  
# typedef enum {
#     FORWARD = 0,
#     BACKWARD = 1
# } ctoast_fft_direction;

# struct ctoast_fft_r1d_;
# typedef struct ctoast_fft_r1d_ ctoast_fft_r1d;

# ctoast_fft_r1d * ctoast_fft_r1d_alloc ( int64_t length, int64_t n, ctoast_fft_plan_type type, ctoast_fft_direction dir, double scale );
# void ctoast_fft_r1d_free ( ctoast_fft_r1d * frd );

# double ** ctoast_fft_r1d_tdata ( ctoast_fft_r1d * frd );

# double ** ctoast_fft_r1d_fdata ( ctoast_fft_r1d * frd );

# void ctoast_fft_r1d_exec ( ctoast_fft_r1d * frd );

# struct ctoast_fft_r1d_plan_store_;
# typedef struct ctoast_fft_r1d_plan_store_ ctoast_fft_r1d_plan_store;

# ctoast_fft_r1d_plan_store * ctoast_fft_r1d_plan_store_get ( );

# void ctoast_fft_r1d_plan_store_clear ( ctoast_fft_r1d_plan_store * pstore );

# void ctoast_fft_r1d_plan_store_cache ( ctoast_fft_r1d_plan_store * pstore, int64_t len, int64_t n );

# ctoast_fft_r1d * ctoast_fft_r1d_plan_store_forward ( ctoast_fft_r1d_plan_store * pstore, int64_t len, int64_t n );

# ctoast_fft_r1d * ctoast_fft_r1d_plan_store_backward ( ctoast_fft_r1d_plan_store * pstore, int64_t len, int64_t n );

# Healpix

class cHealpix(ct.Structure):
    pass

lib.ctoast_healpix_pixels_alloc.restype = ct.POINTER(cHealpix)
lib.ctoast_healpix_pixels_alloc.argtypes = [ ct.c_longlong ]

def healpix_pixels_alloc(nside):
    return lib.ctoast_healpix_pixels_alloc(nside)

lib.ctoast_healpix_pixels_free.restype = None
lib.ctoast_healpix_pixels_free.argtypes = [ ct.POINTER(cHealpix) ]

def healpix_pixels_free(hpix):
    lib.ctoast_healpix_pixels_free(hpix)
    return

lib.ctoast_healpix_pixels_reset.restype = None
lib.ctoast_healpix_pixels_reset.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong ]

def healpix_pixels_reset(hpix, nside):
    lib.ctoast_healpix_pixels_reset(hpix, nside)
    return

lib.ctoast_healpix_pixels_vec2zphi.restype = None
lib.ctoast_healpix_pixels_vec2zphi.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int32, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_vec2zphi(hpix, n, vec, phi, region, z, rtz):
    lib.ctoast_healpix_pixels_vec2zphi(hpix, n, vec, phi, region, z, rtz)
    return

lib.ctoast_healpix_pixels_theta2z.restype = None
lib.ctoast_healpix_pixels_theta2z.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int32, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_theta2z(hpix, n, theta, region, z, rtz):
    lib.ctoast_healpix_pixels_theta2z(hpix, n, theta, region, z, rtz)
    return

lib.ctoast_healpix_pixels_zphi2nest.restype = None
lib.ctoast_healpix_pixels_zphi2nest.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int32, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_zphi2nest(hpix, n, phi, region, z, rtz, pix):
    lib.ctoast_healpix_pixels_zphi2nest(hpix, n, phi, region, z, rtz, pix)
    return

lib.ctoast_healpix_pixels_zphi2ring.restype = None
lib.ctoast_healpix_pixels_zphi2ring.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int32, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_zphi2ring(hpix, n, phi, region, z, rtz, pix):
    lib.ctoast_healpix_pixels_zphi2nest(hpix, n, phi, region, z, rtz, pix)
    return

lib.ctoast_healpix_pixels_ang2nest.restype = None
lib.ctoast_healpix_pixels_ang2nest.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_ang2nest(hpix, n, theta, phi, pix):
    lib.ctoast_healpix_pixels_ang2nest(hpix, n, theta, phi, pix)
    return

lib.ctoast_healpix_pixels_ang2ring.restype = None
lib.ctoast_healpix_pixels_ang2ring.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_ang2ring(hpix, n, theta, phi, pix):
    lib.ctoast_healpix_pixels_ang2ring(hpix, n, theta, phi, pix)
    return

lib.ctoast_healpix_pixels_vec2nest.restype = None
lib.ctoast_healpix_pixels_vec2nest.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_vec2nest(hpix, n, vec, pix):
    lib.ctoast_healpix_pixels_vec2nest(hpix, n, vec, pix)
    return

lib.ctoast_healpix_pixels_vec2ring.restype = None
lib.ctoast_healpix_pixels_vec2ring.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.float64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_vec2ring(hpix, n, vec, pix):
    lib.ctoast_healpix_pixels_vec2ring(hpix, n, vec, pix)
    return

lib.ctoast_healpix_pixels_ring2nest.restype = None
lib.ctoast_healpix_pixels_ring2nest.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_ring2nest(hpix, n, ringpix, nestpix):
    lib.ctoast_healpix_pixels_ring2nest(hpix, n, ringpix, nestpix)
    return

lib.ctoast_healpix_pixels_nest2ring.restype = None
lib.ctoast_healpix_pixels_nest2ring.argtypes = [ ct.POINTER(cHealpix), 
    ct.c_longlong, npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_nest2ring(hpix, n, nestpix, ringpix):
    lib.ctoast_healpix_pixels_nest2ring(hpix, n, nestpix, ringpix)
    return

lib.ctoast_healpix_pixels_degrade_ring.restype = None
lib.ctoast_healpix_pixels_degrade_ring.argtypes = [ ct.POINTER(cHealpix), ct.c_int,
    ct.c_longlong, npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_degrade_ring(hpix, factor, n, inpix, outpix):
    lib.ctoast_healpix_pixels_degrade_ring(hpix, factor, n, inpix, outpix)
    return

lib.ctoast_healpix_pixels_degrade_nest.restype = None
lib.ctoast_healpix_pixels_degrade_nest.argtypes = [ ct.POINTER(cHealpix), ct.c_int,
    ct.c_longlong, npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_degrade_nest(hpix, factor, n, inpix, outpix):
    lib.ctoast_healpix_pixels_degrade_nest(hpix, factor, n, inpix, outpix)
    return

lib.ctoast_healpix_pixels_upgrade_ring.restype = None
lib.ctoast_healpix_pixels_upgrade_ring.argtypes = [ ct.POINTER(cHealpix), ct.c_int,
    ct.c_longlong, npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_upgrade_ring(hpix, factor, n, inpix, outpix):
    lib.ctoast_healpix_pixels_upgrade_ring(hpix, factor, n, inpix, outpix)
    return


lib.ctoast_healpix_pixels_upgrade_nest.restype = None
lib.ctoast_healpix_pixels_upgrade_nest.argtypes = [ ct.POINTER(cHealpix), ct.c_int,
    ct.c_longlong, npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS"),
    npc.ndpointer(dtype=np.int64, ndim=1, flags="C_CONTIGUOUS") ]

def healpix_pixels_upgrade_nest(hpix, factor, n, inpix, outpix):
    lib.ctoast_healpix_pixels_upgrade_nest(hpix, factor, n, inpix, outpix)
    return

#--------------------------------------
#  Run C++ test suite
#--------------------------------------

lib.ctoast_test_runner.restype = ct.c_int
lib.ctoast_test_runner.argtypes = [ ct.c_int, pp_c_char ]

def ctest_runner ():
    argc = len(sys.argv)
    argv = (p_c_char * (argc + 1))()
    for i, arg in enumerate(sys.argv):
        enc_arg = arg.encode('utf-8')
        argv[i] = ct.create_string_buffer(enc_arg)
    ret = lib.ctoast_test_runner(argc, argv)
    return ret

